# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: wp-service-workout
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '2'

custom:
  authorizer:
    name: Cognito
    arn:
      ${self:provider.environment.USER_POOL}
      # arn:aws:cognito-idp:#{AWS::Region}:#{AWS::AccountId}:userpool/${cf:alveo-${self:provider.stage}-aws-setup.UserPoolId}

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20201221

  # you can overwrite defaults here
  stage: ${opt:stage, 'dev'}
  region: ap-southeast-2

  # you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: 'Allow'
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchWriteItem
        - 's3:GetObject'
        - 's3:PutObject'
        - 's3:DeleteObject'
        - 's3:ListBucket'

      Resource: '*'
  #        - "s3:ListBucket"
  #      Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
  #    - Effect: "Allow"
  #      Action:
  #        - "s3:PutObject"
  #      Resource:
  #        Fn::Join:
  #          - ""
  #          - - "arn:aws:s3:::"
  #            - "Ref" : "ServerlessDeploymentBucket"
  #            - "/*"

  # you can define service wide environment variables here
  environment:
    IMPORT_DATA_S3_BUCKET: wp.${self:provider.stage}.importdatabucket
    PRE_DEFINED_WORKOUT_TABLE: wp.${self:provider.stage}.pre_defined_workouts
    USER_POOL:
      'Fn::GetAtt': [CognitoUserPool, Arn]

    # HOME_WORKOUT_TABLE:
    # BENCHMARK_WORKOUT_TABLE:
    # HERO_WORKOUT_TABLE:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  # import data functions
  importData:
    handler: import-data/ddbImporter.handler
    timeout: 30
    memorySize: 512
    # environment:
    #   DDBtable: ${self:provider.environment.OPEN_WORKOUT_TABLE}
    #   AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    events:
      - s3:
          bucket: ${self:provider.environment.IMPORT_DATA_S3_BUCKET}
          event: s3:ObjectCreated:*
          rules:
            - suffix: .json

  # API functions
  getWorkout:
    handler: api/workout.get
    memorySize: 128
    description: Get workouts from different categories
    events:
      - http:
          path: workout/{category}
          method: get
          cors: true
          # authorizer: ${self:custom.authorizer}
          request:
            parameters:
              paths:
                category: true
              querystrings:
                anyinTable: false
      - http:
          path: workout/all
          method: get
          cors: true
          # authorizer: ${self:custom.authorizer}
          request:
            parameters:
              querystrings:
                equipment: true
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

resources:
  Resources:
    # DynamoDBs
    PreDefinedWorkoutsDynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: 'Id'
            AttributeType: 'S'
          - AttributeName: 'category'
            AttributeType: 'S'
        KeySchema:
          - AttributeName: 'category'
            KeyType: 'HASH'
          - AttributeName: 'Id'
            KeyType: 'RANGE'
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        StreamSpecification:
          StreamViewType: 'NEW_AND_OLD_IMAGES'
        TableName: ${self:provider.environment.PRE_DEFINED_WORKOUT_TABLE}
    # S3 buckets
    # CognitoUserPool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:provider.stage}-authsls-user-pool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:provider.stage}-authsls-user-pool-client
        UserPoolId:
          Ref: CognitoUserPool
        GenerateSecret: false
        SupportedIdentityProviders:
          - Google
        CallbackURLs:
          - https://www.google.com.au
        AllowedOAuthFlows:
          - implicit
        AllowedOAuthScopes:
          - email
          - openid
          - aws.cognito.signin.user.admin
          - profile
          - phone
        AllowedOAuthFlowsUserPoolClient: true
    CognitoUserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        Domain: google-authen
        UserPoolId:
          Ref: CognitoUserPool
    CognitoUserPoolIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        ProviderName: Google
        AttributeMapping:
          email: email
        ProviderDetails:
          client_id: ${file(./config-${opt:stage, 'dev'}.json):Google_Creds.GoogleOauth_Client_Id}
          client_secret: ${file(./config-${opt:stage, 'dev'}.json):Google_Creds.GoogleOauth_Client_Secret}
          authorize_scopes: email openid
        ProviderType: Google
        UserPoolId:
          Ref: CognitoUserPool
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
